

#include <stdio.h>
#include <stdint.h>
#include <signal.h>
#include <stdlib.h>
#include <Windows.h>
#include <conio.h>

// my libs
#include "enums.h"

/*Memory and Registers*/
#define MEMORY_MAX (1 << 16)
uint16_t memory[MEMORY_MAX]; /*this the array that acts as our ->*/

/*Register storage*/
uint16_t reg[R_COUNT];


void update_flags(uint16_t r)
{

    if (reg[r] == 0)
    {

        reg[R_COND] = FL_ZRO;
    }

    else if (reg[r] >> 15) /* a 1 in the left-most bit indicates negative */
    {
        reg[R_COND] = FL_NEG;
    }
    else
    {
        reg[R_COND] = FL_POS;
    }
}

uint16_t sign_extend(uint16_t x, int bit_count)
{

    if ((x >> (bit_count - 1)) & 1)
    {

        x |= (0xFFFF << bit_count);
    }

    return x;
}

int main(int argc, const char *argv[])
{

    /* since exactly one condition flag should be set at any given time, set the Z flag */
    reg[R_COND] = FL_ZRO;

    /* set the PC to starting position */
    /* 0x3000 is the default */
    enum
    {
        PC_START = 0x3000
    };
    reg[R_PC] = PC_START;

    int running = 1;
    while (running)
    {
        /* FETCH */
        uint16_t instr = mem_read(reg[R_PC]++);
        uint16_t op = instr >> 12;

        switch (op)
        {
        case OP_ADD:
            break;
        case OP_AND:
            break;
        case OP_NOT:
            break;
        case OP_BR:
            break;
        case OP_JMP:
            break;
        case OP_JSR:
            break;
        case OP_LD:
            break;
        case OP_LDI:
            break;
        case OP_LDR:
            break;
        case OP_LEA:
            break;
        case OP_ST:
            break;
        case OP_STI:
            break;
        case OP_STR:
            break;
        case OP_TRAP:
            reg[R_R7] = reg[R_PC];

            switch (instr & 0xFF)
            {
            case TRAP_GETC:

                break;
            case TRAP_OUT:

                break;
            case TRAP_PUTS:
                break;
            case TRAP_IN:
                break;
            case TRAP_PUTSP:
                break;
            case TRAP_HALT:
                break;
            }
        case OP_RES:
        case OP_RTI:
        default:
            break;
        }
    }
}