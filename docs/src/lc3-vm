#include "trapFunctions.h"

#include <stdint.h>
#include <stdio.h>
#include <signal.h>
#include <stdlib.h>

#include <windows.h>
#include <conio.h>

// my libs
#include "enums.h"
#include "opFunctions.h"

/*Memory and Registers*/
#define MEMORY_MAX (1 << 16)
uint16_t memory[MEMORY_MAX]; /*this the array that acts as our ->*/

/*Register storage*/
uint16_t reg[R_COUNT];

/*Input buffering for windows*/
HANDLE hStdin = INVALID_HANDLE_VALUE;
DWORD fdwMode, fdwOldMode;

void disable_input_buffering()
{
    hStdin = GetStdHandle(STD_INPUT_HANDLE);
    GetConsoleMode(hStdin, &fdwOldMode);     /* save old mode */
    fdwMode = fdwOldMode ^ ENABLE_ECHO_INPUT /* no input echo */
              ^ ENABLE_LINE_INPUT;           /* return when one or
                                                more characters are available */
    SetConsoleMode(hStdin, fdwMode);         /* set new mode */
    FlushConsoleInputBuffer(hStdin);         /* clear buffer */
}

void restore_input_buffering()
{
    SetConsoleMode(hStdin, fdwOldMode);
}

uint16_t check_key()
{
    return WaitForSingleObject(hStdin, 1000) == WAIT_OBJECT_0 && _kbhit();
}

uint16_t sign_extend(uint16_t x, int bit_count)
{
    if ((x >> (bit_count - 1)) & 1)
    {
        x |= (0xFFFF << bit_count);
    }
    return x;
}
/*handle interrupts*/
void handle_interrupt(int signal)
{
    restore_input_buffering();
    printf("\n");
    exit(-2);
}

// swapping functions
uint16_t swap16(uint16_t x)
{
    return (x << 8) | (x >> 8);
}

void update_flags(uint16_t r)
{

    if (reg[r] == 0)
    {

        reg[R_COND] = FL_ZRO;
    }

    else if (reg[r] >> 15) /* a 1 in the left-most bit indicates negative */
    {
        reg[R_COND] = FL_NEG;
    }
    else
    {
        reg[R_COND] = FL_POS;
    }
}

// read image
/*
basically loads binaries to the memory*/
void read_image_file(FILE *file)
{
    uint16_t origin;
    fread(&origin, sizeof(origin), 1, file);
    origin = swap16(origin);

    uint16_t max_read = MEMORY_MAX - origin;

    uint16_t *p = memory + origin;
    size_t read = fread(p, sizeof(uint16_t), max_read, file);

    /*swapping to little endian*/
    while (read-- > 0)
    {
        *p = swap16(*p);
        ++p;
    }
}

int read_image(const char *image_path)

{
    FILE *file = fopen(image_path, "rb");
    if (!file)
    {
        return 0;
    }
    read_image_file(file);
    fclose(file);
    return 1;
}

/*assigns the value to the address*/
void mem_write(uint16_t address, uint16_t val)
{
    memory[address] = val;
}

uint16_t mem_read(uint16_t address)
{
    if (address == MR_KBSR)
    {
        if (check_key())
        {
            memory[MR_KBSR] = (1 << 15);
            memory[MR_KBDR] = getchar();
        }
    }

    else
    {
        memory[MR_KBSR] = 0;
    }

    return memory[address];
}

int main(int argc, const char *argv[])
{
    if (argc < 2)
    {
        printf("Welp I don't know what to say");
        exit(2);
    }

    for (int j = 1; j < argc; j++)
    {
        if (!read_image(argv))
        {
            printf("failed to load image : %s\n", argv[j]);
        }
    }

    /*set up for the virtual env*/
    signal(SIGINT, handle_interrupt);
    disable_input_buffering();
    /* since exactly one condition flag should be set at any given time, set the Z flag */
    reg[R_COND] = FL_ZRO;

    /* set the PC to starting position */
    /* 0x3000 is the default */
    enum
    {
        PC_START = 0x3000
    };
    reg[R_PC] = PC_START;

    int running = 1;
    while (running)
    {
        /* FETCH */
        uint16_t instr = mem_read(reg[R_PC]++);
        uint16_t op = instr >> 12;
        uint16_t imm;

        /*op's*/
        switch (op)
        {
        case OP_ADD:
        {
            uint16_t r0 = ADD(reg, instr, sign_extend(instr & 0x1F, 5));
            update_flags(r0);
        }
        break;

        case OP_AND:
        {
            uint16_t r0 = AND(reg, instr, sign_extend(instr & 0x1F, 5));
            update_flags(r0);
        }
        break;

        case OP_NOT:
        {
            uint16_t r0 = NOT(reg, instr);
            update_flags(r0);
        }
        break;

        case OP_BR:
        {
            BR(reg, instr, sign_extend(instr & 0x1FF, 9));
        }
        break;

        case OP_JMP:
        {
            JMP(reg, instr);
        }
        break;

        case OP_JSR:
        {
            JSR_R(reg, instr, sign_extend(instr & 0x3FF, 11));
        }
        break;

        case OP_LD:
        {
            uint16_t r0 = LD(reg, instr, sign_extend(instr & 0x1FF, 9));
            update_flags(r0);
        }
        break;

        case OP_LDI:
            // TODO: Call LDI(reg, instr, ...) and update_flags
            break;

        case OP_LDR:
            // TODO: Call LDR(reg, instr, ...) and update_flags
            break;

        case OP_LEA:
            // TODO: Call LEA(reg, instr, ...) and update_flags
            break;

        case OP_ST:
            // TODO: Call ST(reg, instr, ...)
            break;

        case OP_STI:
            // TODO: Call STI(reg, instr, ...)
            break;

        case OP_STR:
            // TODO: Call STR(reg, instr, ...)
            break;

        case OP_TRAP:
            reg[R_R7] = reg[R_PC];

            switch (instr & 0xFF)
            {
            case TRAP_GETC:

                break;
            case TRAP_OUT:

                break;
            case TRAP_PUTS:
                break;
            case TRAP_IN:
                break;
            case TRAP_PUTSP:
                break;
            case TRAP_HALT:
                break;
            }
        case OP_RES:
        case OP_RTI:
        default:
            break;
        }
    }

    restore_input_buffering();
}